# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iMc2bCqW93T5wMboQ6C_l9HwR_eLSxs5
"""

import numpy as np
class Perceptron:
  def __init__(self, input_size=2, learning_rate=2, epochs=100):
    self.input_size=input_size
    self.learning_rate=learning_rate
    self.epochs=epochs
    self.weights=np.zeros(input_size)
    self.bias=0
  def forward(self, X):
    return np.dot(X, self.weights)+self.bias
  def activation(self, X):
    return 0 if X<0 else 1
  def train(self, X, Y):
    for epoch in range (self.epochs):
      for i in range (len(X)):
        output= self.forward(X[i])
        pred=self.activation(output)
        error=Y[i]-pred
        self.weights+=self.learning_rate*error*X[i]
        self.bias+=self.learning_rate*pred
  def predict(self, X):
    output=self.forward(X)
    return self.activation(output)

x=np.array([[70, 500],
            [50, 300],
            [80, 700],
            [30, 200],
            [60, 450]
])

y=np.array([1,0,1,0,1])

perceptron= Perceptron(input_size=2, learning_rate=0.01, epochs=100)
perceptron.train(x,y)
test_sample=np.array([75, 550])
perceptron.predict(test_sample)
print(f"Test Sample [75, 550] Prediction is: {perceptron.predict(test_sample)}")
for i in range(len(x)):
  print(f"Prediction for {x[i]} is : {perceptron.predict(test_sample)} , Actual: {y[i]}")

import numpy as np

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Neural Network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)  # Random weights for input to hidden
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)  # Random weights for hidden to output
        self.bias_hidden = np.zeros((1, hidden_size))  # Bias for hidden layer
        self.bias_output = np.zeros((1, output_size))  # Bias for output layer

    def forward(self, X):
        # Forward pass
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)

        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.final_output = sigmoid(self.final_input)

        return self.final_output

    def backward(self, X, y, learning_rate):
        # Calculate error
        error = y - self.final_output
        d_output = error * sigmoid_derivative(self.final_output)

        # Backpropagate the error to the hidden layer
        error_hidden_layer = d_output.dot(self.weights_hidden_output.T)
        d_hidden_layer = error_hidden_layer * sigmoid_derivative(self.hidden_output)

        # Update weights and biases using gradient descent
        self.weights_hidden_output += self.hidden_output.T.dot(d_output) * learning_rate
        self.weights_input_hidden += X.T.dot(d_hidden_layer) * learning_rate
        self.bias_output += np.sum(d_output, axis=0, keepdims=True) * learning_rate
        self.bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * learning_rate

    def train(self, X, y, epochs, learning_rate):
        for epoch in range(epochs):
            # Perform forward and backward pass
            self.forward(X)
            self.backward(X, y, learning_rate)

            # Print the loss every 1000 epochs
            if epoch % 1000 == 0:
                loss = np.mean(np.square(y - self.final_output))  # Mean squared error
                print(f"Epoch {epoch}, Loss: {loss}")

# Define the training data (AND Gate for simplicity)
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Input
y = np.array([[0], [0], [0], [1]])  # Output (AND operation)

# Create a Neural Network with 2 input neurons, 2 hidden neurons, and 1 output neuron
nn = NeuralNetwork(input_size=2, hidden_size=2, output_size=1)

# Train the network
nn.train(X, y, epochs=10000, learning_rate=0.1)

# Test the network on the trained data
print("\nPredictions after training:")
print(nn.forward(X))

